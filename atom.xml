<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jian&#39;s Notes</title>
  <subtitle>iOS Dev.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itrufeng.com/"/>
  <updated>2016-09-06T00:21:19.000Z</updated>
  <id>http://itrufeng.com/</id>
  
  <author>
    <name>Jian Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>app-security</title>
    <link href="http://itrufeng.com/2016/08/31/app-security/"/>
    <id>http://itrufeng.com/2016/08/31/app-security/</id>
    <published>2016-08-31T06:03:13.000Z</published>
    <updated>2016-09-06T00:21:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-code-signing"><a href="#App-code-signing" class="headerlink" title="App code signing"></a>App code signing</h1><p>当iOS系统启动后，App code<br>signing控制着哪些用户的进程/App可以被运行，并且确保所有的Apps来源安全，iOS要求所有的可执行代码被苹果证书签名，例如苹果自己的App，Mail，Safari呀这些。我们开发的第三方Apps同样必须被苹果证书签名，iOS强制使用信任链的概念来签名Apps，并且阻止加载未签名的App和虽然签名但是被修改了代码的App。</p>
<p>iOS允许开发者内嵌其他的Frameworks在自己的Apps中，它可以被自己的其他内置的extensions调用。为了保护其他App加载第三方的代码，系统会在link的时候对第三方的代码或者动态库同样签名，签名是通过证书的Team identifier来做的，简称TeamID，它是由10位的字母和数字组成。同样TeamID签名的任何Library，都可以被主程序调用。</p>
<p>商用Apps，可以用in-house方式分发给员工。并且需要应用Apple Developer Enterprise Program (ADEP)，ADEP需要生成一个Provisioning Profile来许可自己的App被安装。只有设备安装了这个Provisioning Profile，才可以安装和允许商用App，这间接的确保了信任关系。</p>
<p>iOS不像其他手机平台，iOS不允许运行从网站下载的未签名的程序，不允许运行不信任的代码。并且会在运行时候检查内存中可执行程序，确保App没有被在安装后或者升级后被串改。</p>
<h1 id="Runtime-process-security"><a href="#Runtime-process-security" class="headerlink" title="Runtime process security"></a>Runtime process security</h1><p>在iOS<br>App被签名验证之后，iOS会强行使用安全机制来保护，不让其他App影响自己或者影响别的App。</p>
<p>所有的第三方App都在Sandbox中运行，它不可以访问或着修改别的App或者系统设备。每个App都有一个唯一的Home目录，当App被安装的时候。他们只能使用系统提供的服务来访问没有权限的部分。每个App都有一个key value pair，这就像unix user ID的权限一样。</p>
<p>App只能通过系统提供的API在后台运行自己的程序，这样可以保证可以后台执行，并且保护电池寿命。</p>
<p>地址空间布局随机化(ASLR)保护，让内存溢出攻击变得不那么容易，系统内置的App都使用了这个技术，它让可执行代码，系统库的攻击都增加了复杂度。</p>
<p>在Xocde中，开发第三方App时候，默认开启ASLR支持，在编译的时候。</p>
<p>进一步的保护是，让内存页不可执行，内存也有2个标记，可写和可执行，这被严格控制着。内核只检查动态签名，即便如此，单项调用可执行和可写，它会被随机分配一个地址。Safari的javascript JIT编译器就是如此。</p>
<h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>iOS允许App通过Extensions提供功能，Extensions的二进制可执行文件被特殊的签名而签名，并且打包在app中。系统会自动找到Extensions在安装的时候，并且让他们可以工作。</p>
<p>每个Extensions提供一些APIs可以被使用，每个Extensions都有一些固定功能，系统自动运行这些Extensions在系统需要的时候，并且会管理他们的生命周期。Entitlements用来限制Extensions的权限，例如Today view widget只能出现在Notification Center，Sharing只能出现在共享面板。这些Extensions通常有，Today，共享，自定义Actions，图片编辑，文档提供和自定义键盘。</p>
<p>Extensions运行在独立的空间中，两个Extensions之间只能通过系统提供的API来通信，不能互相访问内存或者文件系统，他们相互隔离，打包在一个App中。他们之间就想我们开发的第三方App的Sandbox一样，他们共享App的权限，例如App被授权访问联系人，那么这个Extension也可以访问联系人。如果在Extension中授权了访问联系人权限，系统会吧权限给App而不是这个Extension。</p>
<p>自定义键盘是一个特殊的Extension，它需要用户在系统设置里启用。当启用时，这个Extension将被用户用户在任何输入框中。因权限，自定义键盘默认运行在Sandbox中，它非常限制网络访问，API只能扩展用户输入数据。开发人员可以请求开放权限，系统会在用户同意后运行这个Extension。</p>
<p>通过自定义Extension，开发人员可以用第三方的键盘给自己的App。</p>
<h1 id="App-Group"><a href="#App-Group" class="headerlink" title="App Group"></a>App Group</h1><p>Apps和Extensions都是同一个开发账号下的话，他们可以共享他们的数据，当配置了App Group后。配置一次App Group, Apps就拥有一下访问权限。</p>
<ul>
<li>分享磁盘中的存储数据</li>
<li>这些数据会被保存直到该Group下最后一个应用被删除。</li>
<li>共享Preferences</li>
<li>共享Keychain数据</li>
</ul>
<p>每一个App Group IDs都是唯一的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-code-signing&quot;&gt;&lt;a href=&quot;#App-code-signing&quot; class=&quot;headerlink&quot; title=&quot;App code signing&quot;&gt;&lt;/a&gt;App code signing&lt;/h1&gt;&lt;p&gt;当iOS系统启动后，App 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>weak-and-unowned</title>
    <link href="http://itrufeng.com/2016/04/12/weak-and-unowned/"/>
    <id>http://itrufeng.com/2016/04/12/weak-and-unowned/</id>
    <published>2016-04-12T08:03:05.000Z</published>
    <updated>2016-08-31T08:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h3><p>首先她们都是弱引用，不会让retainCount数增加。区别是，unowned常用在自己写程序时候，明确知道这里的值不为空，所以引用的对象不是Optional类型，而weak是不确定此时值是否存在，是Optional类型。</p>
<p>请看例子</p>
<h4 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx.callback &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">  <span class="keyword">self</span>?.property</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="unowned"><a href="#unowned" class="headerlink" title="unowned"></a>unowned</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx.callback &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">  <span class="keyword">self</span>.property</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h3><p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html" target="_blank" rel="external">Apple Doc</a></p>
<p>请看一下两部分</p>
<ul>
<li>Weak References</li>
<li>Unowned References</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单解释&quot;&gt;&lt;a href=&quot;#简单解释&quot; class=&quot;headerlink&quot; title=&quot;简单解释&quot;&gt;&lt;/a&gt;简单解释&lt;/h3&gt;&lt;p&gt;首先她们都是弱引用，不会让retainCount数增加。区别是，unowned常用在自己写程序时候，明确知道这里的值不为空，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>use-docker-by-vagrant-not-docker-machine</title>
    <link href="http://itrufeng.com/2016/04/02/use-docker-by-vagrant-not-docker-machine/"/>
    <id>http://itrufeng.com/2016/04/02/use-docker-by-vagrant-not-docker-machine/</id>
    <published>2016-04-02T08:02:52.000Z</published>
    <updated>2016-08-31T08:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vagrant-VS-docker-machine"><a href="#Vagrant-VS-docker-machine" class="headerlink" title="Vagrant VS docker-machine"></a>Vagrant VS docker-machine</h2><ul>
<li>Vagrant<br>有更多的虚拟机基础包可以选择，而docker-machine只有一个基础包。</li>
<li>Vagrant可以使用brew安装和卸载，docker-machine不可以。</li>
<li>Vagrant提供文件同步等插件，还有网络ip等方便的配置文件，docker-machine需要命令can<br>参数，不直观。</li>
</ul>
<h2 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h2><p><code>brew cask install vagrant</code></p>
<h2 id="使用Vagrant创建一个带有docker的虚拟机"><a href="#使用Vagrant创建一个带有docker的虚拟机" class="headerlink" title="使用Vagrant创建一个带有docker的虚拟机"></a>使用Vagrant创建一个带有docker的虚拟机</h2><p><code>vagrant init williamyeh/ubuntu-trusty64-docker</code></p>
<h2 id="给虚拟机一个ip，方便以后访问"><a href="#给虚拟机一个ip，方便以后访问" class="headerlink" title="给虚拟机一个ip，方便以后访问"></a>给虚拟机一个ip，方便以后访问</h2><p>释放这条配置</p>
<p><code>config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</code></p>
<h2 id="同步本目录到虚拟机中"><a href="#同步本目录到虚拟机中" class="headerlink" title="同步本目录到虚拟机中"></a>同步本目录到虚拟机中</h2><p>释放这条配置，并修改。主要需要<code>rsync</code>。</p>
<p><code>config.vm.synced_folder &quot;./&quot;, &quot;/vagrant_data&quot;, type: &quot;rsync&quot;</code></p>
<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p><code>vagrant up</code></p>
<h2 id="进入虚拟机"><a href="#进入虚拟机" class="headerlink" title="进入虚拟机"></a>进入虚拟机</h2><p><code>vagrant ssh</code></p>
<p>接下来，就可以使用docker啦。</p>
<h2 id="同步文件目录，当文件被修改的时候。"><a href="#同步文件目录，当文件被修改的时候。" class="headerlink" title="同步文件目录，当文件被修改的时候。"></a>同步文件目录，当文件被修改的时候。</h2><p><code>vagrant rsync-auto</code></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.vagrantup.com/docs/synced-folders/rsync.html" target="_blank" rel="external">RSYNC</a></li>
<li><a href="https://www.vagrantup.com/docs/cli/rsync-auto.html" target="_blank" rel="external">RSYNC-AUTO</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vagrant-VS-docker-machine&quot;&gt;&lt;a href=&quot;#Vagrant-VS-docker-machine&quot; class=&quot;headerlink&quot; title=&quot;Vagrant VS docker-machine&quot;&gt;&lt;/a&gt;Vagrant VS 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Realm的迁移在Kotlin中</title>
    <link href="http://itrufeng.com/2016/02/04/use-realm-migration-on-kotlin/"/>
    <id>http://itrufeng.com/2016/02/04/use-realm-migration-on-kotlin/</id>
    <published>2016-02-04T08:02:34.000Z</published>
    <updated>2016-08-31T08:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p><a href="/use-realm-on-kotlin/">使用Realm在Kotlin中(Android)</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="App第一个版本"><a href="#App第一个版本" class="headerlink" title="App第一个版本"></a>App第一个版本</h3><p>RealmLink.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmLink</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> url: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> title: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> createDate: Date? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> tags: RealmList&lt;RealmTag&gt;? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RealmTag.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmTag</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> tags = arrayListOf(<span class="string">"Web"</span>, <span class="string">"Search"</span>)</div><div class="line"><span class="comment">// 得到配置(暂无数据迁移)</span></div><div class="line"><span class="keyword">val</span> config = RealmConfiguration.Builder(context).build()</div><div class="line"><span class="comment">// 获得数据库对象</span></div><div class="line"><span class="keyword">val</span> realm = Realm.getInstance(config)</div><div class="line"><span class="comment">// 执行事务</span></div><div class="line">realm.executeTransaction &#123;</div><div class="line">    <span class="comment">// 创建RealmLink对象</span></div><div class="line">    <span class="keyword">val</span> realmLink = realm.createObject(RealmLink::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    realmLink.title = <span class="string">"Google"</span></div><div class="line">    realmLink.url = <span class="string">"https://google.com"</span></div><div class="line">    realmLink.createDate = Date()</div><div class="line">    tags.forEach &#123; it -&gt;</div><div class="line">        <span class="keyword">val</span> realmTag = realm.createObject(RealmTag::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">        realmTag.name = it</div><div class="line">        realmLink.tags?.add(realmTag)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 存储</span></div><div class="line">    realm.copyFromRealm(realmLink)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="App第二个版本"><a href="#App第二个版本" class="headerlink" title="App第二个版本"></a>App第二个版本</h3><p>RealmLink.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmLink</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> url: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> title: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> createDate: Date? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> modifiedDate: Date? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> tags: RealmList&lt;RealmTag&gt;? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RealmTag.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmTag</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> tags = arrayListOf(<span class="string">"Web"</span>, <span class="string">"Search"</span>)</div><div class="line"><span class="comment">// 得到配置(数据迁移到版本1)</span></div><div class="line"><span class="keyword">val</span> config = RealmConfiguration.Builder(<span class="keyword">this</span>)</div><div class="line">            .schemaVersion(<span class="number">1</span>) <span class="comment">// 新版本1</span></div><div class="line">            .migration &#123; realm, oldVersion, newVersion -&gt;</div><div class="line">                <span class="keyword">var</span> version = oldVersion</div><div class="line">                <span class="keyword">val</span> schema = realm.schema</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (version == <span class="number">0</span>L) &#123; <span class="comment">// 旧版本0</span></div><div class="line">                    schema.<span class="keyword">get</span>(RealmLink::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span>)</span></div><div class="line">                            .addField(<span class="string">"modifiedDate"</span>, Date::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">                    version++</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            .build()</div><div class="line"><span class="comment">// 获得数据库对象</span></div><div class="line"><span class="keyword">val</span> realm = Realm.getInstance(config)</div><div class="line"><span class="comment">// 执行事务</span></div><div class="line">realm.executeTransaction &#123;</div><div class="line">    <span class="comment">// 创建RealmLink对象</span></div><div class="line">    <span class="keyword">val</span> realmLink = realm.createObject(RealmLink::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    realmLink.title = <span class="string">"Google"</span></div><div class="line">    realmLink.url = <span class="string">"https://google.com"</span></div><div class="line">    realmLink.createDate = Date()</div><div class="line">    realmLink.modifiedDate = Date()</div><div class="line">    tags.forEach &#123; it -&gt;</div><div class="line">        <span class="keyword">val</span> realmTag = realm.createObject(RealmTag::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">        realmTag.name = it</div><div class="line">        realmLink.tags?.add(realmTag)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 存储</span></div><div class="line">    realm.copyFromRealm(realmLink)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>如果首次安装App，它会执行迁移吗？</p>
</blockquote>
<p>回答：不会，首次安装App，会按照你所有的Model类，自动创建结构。只有更新App(数据字段有更新)后，才会执行迁移，哪怕配置了迁移，第一次也不会执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序章&quot;&gt;&lt;a href=&quot;#序章&quot; class=&quot;headerlink&quot; title=&quot;序章&quot;&gt;&lt;/a&gt;序章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/use-realm-on-kotlin/&quot;&gt;使用Realm在Kotlin中(Android)&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Realm在Kotlin中(Android)</title>
    <link href="http://itrufeng.com/2016/01/30/use-realm-on-kotlin/"/>
    <id>http://itrufeng.com/2016/01/30/use-realm-on-kotlin/</id>
    <published>2016-01-30T08:02:19.000Z</published>
    <updated>2016-08-31T08:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>build.gradle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Realm</div><div class="line">compile &apos;io.realm:realm-android-library:0.87.4@aar&apos;</div><div class="line">compile &apos;io.realm:realm-annotations:0.87.4&apos;</div><div class="line">kapt &apos;io.realm:realm-annotations:0.87.4&apos;</div><div class="line">kapt &apos;io.realm:realm-annotations-processor:0.87.4&apos;</div></pre></td></tr></table></figure>
<p>proguard-rules.pro</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Realm</div><div class="line">-keep class io.realm.annotations.RealmModule</div><div class="line">-keep @io.realm.annotations.RealmModule class *</div><div class="line">-keep class io.realm.internal.Keep</div><div class="line">-keep @io.realm.internal.Keep class * &#123; *; &#125;</div><div class="line">-dontwarn javax.**</div><div class="line">-dontwarn io.realm.**</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>RealmLink.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmLink</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> url: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> title: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> createDate: Date? = <span class="literal">null</span></div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> tags: RealmList&lt;RealmTag&gt;? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RealmTag.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmTag</span>: <span class="type">RealmObject</span></span>() &#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.kt</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> tags = arrayListOf(<span class="string">"Web"</span>, <span class="string">"Search"</span>)</div><div class="line"><span class="comment">// 得到配置(暂无数据迁移)</span></div><div class="line"><span class="keyword">val</span> config = RealmConfiguration.Builder(context).build()</div><div class="line"><span class="comment">// 获得数据库对象</span></div><div class="line"><span class="keyword">val</span> realm = Realm.getInstance(config)</div><div class="line"><span class="comment">// 执行事务</span></div><div class="line">realm.executeTransaction &#123;</div><div class="line">    <span class="comment">// 创建RealmLink对象</span></div><div class="line">    <span class="keyword">val</span> realmLink = realm.createObject(RealmLink::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    realmLink.title = <span class="string">"Google"</span></div><div class="line">    realmLink.url = <span class="string">"https://google.com"</span></div><div class="line">    realmLink.createDate = Date()</div><div class="line">    tags.forEach &#123; it -&gt;</div><div class="line">        <span class="keyword">val</span> realmTag = realm.createObject(RealmTag::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">        realmTag.name = it</div><div class="line">        realmLink.tags?.add(realmTag)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 存储</span></div><div class="line">    realm.copyFromRealm(realmLink)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>XXX is not part of the schema for this Realm</p>
</blockquote>
<p>原因：重复引用Realm库。</p>
<p>解决方法：去掉下面第一条就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.realm:realm-android:0.87.4&apos;</div><div class="line">compile &apos;io.realm:realm-android-library:0.87.4@aar&apos;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/realm/realm-java/issues/2162" target="_blank" rel="external">当时问题解决链接</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/RxKotlin/Pocket/tree/use-realm" target="_blank" rel="external">点这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;build.gradle&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建Android库 并且上传到jcenter</title>
    <link href="http://itrufeng.com/2016/01/17/create-a-android-library-and-upload-to-jcenter/"/>
    <id>http://itrufeng.com/2016/01/17/create-a-android-library-and-upload-to-jcenter/</id>
    <published>2016-01-17T07:59:06.000Z</published>
    <updated>2016-08-31T08:53:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>自定义一个Math库</li>
<li>上传到jcenter</li>
<li>在自己的App中引用</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>注册<a href="https://bintray.com/" target="_blank" rel="external">Bintray</a>，我们会上传到这里，并且送入jcenter。</li>
<li>添加一个<code>Package</code>叫做<code>Math</code>在<code>maven</code>库中。</li>
</ul>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>Math</td>
</tr>
<tr>
<td>Licenses</td>
<td>MIT</td>
</tr>
<tr>
<td>Version control</td>
<td><a href="https://github.com/itrufeng/Math" target="_blank" rel="external">https://github.com/itrufeng/Math</a></td>
</tr>
</tbody>
</table>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>创建项目<code>MathAppWithJcenter</code></li>
<li>创建Android Library<code>Math</code></li>
<li>添加类<code>Math</code>在<code>Math</code>库中</li>
<li>添加上传插件</li>
<li>上传</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle bintrayUpload</div></pre></td></tr></table></figure>
<ul>
<li>发布，进入<code>Bintray</code>网站<code>Math</code>库。点击<code>Publish</code></li>
</ul>
<blockquote>
<p>Notice: You have 2 unpublished item(s) for this repo (expiring in 6 days and 22 hours) Discard | Publish</p>
</blockquote>
<ul>
<li>在App中引用</li>
</ul>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/itrufeng/MathAppWithJencter" target="_blank" rel="external">Github</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin#read" target="_blank" rel="external">Gradle bintray plugin</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自定义一个Math库&lt;/li&gt;
&lt;li&gt;上传到jcenter&lt;/li&gt;
&lt;li&gt;在自己的App中引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
</feed>
